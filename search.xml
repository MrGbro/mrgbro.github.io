<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>深入浅出Full GC：从底层原理到架构优化的全方位治理指南</title>
    <url>/2025/10/15/FullGC%E7%B3%BB%E7%BB%9F%E6%80%A7%E5%88%86%E6%9E%90%E4%B8%8E%E6%B2%BB%E7%90%86/</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在复杂的后端服务体系中，JVM 的 Full GC（Full Garbage Collection）问题如同潜伏的幽灵，一旦频繁发生，便会导致服务响应延迟飙升、吞吐量骤降，甚至引发整个系统的雪崩。许多开发者谈 “Full GC” 色变，但往往只停留在调整 JVM 参数的层面。真正的技术高手需要具备从底层原理、根因分析到架构优化的全方位治理能力。</p>
<span id="more"></span>
<p>本文将以架构师的视角，系统性地带您深入 Full GC 的世界，从理解其触发机制与危害开始，掌握一套从“外部观测”到“四步定位”的标准化排查框架，并最终落地从“应急止血”到“架构升级”的端到端解决方案，助您彻底征服 Full GC 难题。</p>
<h2 id="一、探究底层：Full-GC-的触发机制与核心危害"><a href="#一、探究底层：Full-GC-的触发机制与核心危害" class="headerlink" title="一、探究底层：Full GC 的触发机制与核心危害"></a>一、探究底层：Full GC 的触发机制与核心危害</h2><p>在解决问题之前，我们必须首先理解 Full GC 的本质。Full GC 是 JVM 针对老年代（Old Generation）或元空间（Metaspace）进行的“全量垃圾回收”。其核心特点是会产生长时间的“Stop-The-World”（STW），即暂停所有业务线程。频繁的 Full GC 是系统健康状况的严重警报。</p>
<h3 id="1-1-核心触发条件"><a href="#1-1-核心触发条件" class="headerlink" title="1.1 核心触发条件"></a>1.1 核心触发条件</h3><p>Full GC 并非随机事件，其触发条件主要归为以下四类：</p>
<table>
<thead>
<tr>
<th>触发场景</th>
<th>底层原因</th>
<th>典型案例</th>
</tr>
</thead>
<tbody><tr>
<td><strong>老年代空间不足</strong></td>
<td>新生代对象晋升至老年代，但老年代剩余空间不足以容纳。</td>
<td>批量处理大文件、缓存数据未及时清理。</td>
</tr>
<tr>
<td><strong>元空间 (Metaspace) 溢出</strong></td>
<td>加载的类过多，超出了元空间设定的上限。</td>
<td>Spring 动态代理、Groovy 脚本频繁编译等场景。</td>
</tr>
<tr>
<td><code>System.gc()</code><strong>调用</strong></td>
<td>代码中或第三方框架手动触发了 Full GC。</td>
<td>错误的“内存优化”代码或某些框架的隐式调用。</td>
</tr>
<tr>
<td><strong>GC 算法的特殊逻辑</strong></td>
<td>特定 GC 算法在某些临界条件下触发，如 CMS 的 “Concurrent Mode Failure” 或 G1 的 “Humongous Allocation Failure”。</td>
<td>高并发下突发大对象写入，或 G1 Region 划分不合理。</td>
</tr>
</tbody></table>
<h3 id="1-2-频繁-Full-GC-的三大危害"><a href="#1-2-频繁-Full-GC-的三大危害" class="headerlink" title="1.2 频繁 Full GC 的三大危害"></a>1.2 频繁 Full GC 的三大危害</h3><p>从技术高手的视角看，频繁 Full GC 的危害远不止“性能变慢”那么简单：</p>
<ol>
<li><strong>服务可用性骤降</strong>：长时间的 STW 会导致核心业务（如秒杀、支付）的请求大量超时，直接触发熔断，严重影响用户体验。</li>
<li><strong>陷入资源恶性循环</strong>：Full GC 自身消耗大量 CPU 资源，导致业务线程处理变慢，对象堆积速度加快，进一步加剧内存压力，形成“GC 越频繁 -&gt; 系统越慢 -&gt; 内存越紧张”的死循环。</li>
<li><strong>引发“死亡螺旋”导致雪崩</strong>：单个节点的性能问题可能通过分布式调用扩散至整个集群。 系统最终会因资源耗尽而崩溃，引发雪崩效应。</li>
</ol>
<h2 id="二、追本溯源：Full-GC-的常见根因剖析"><a href="#二、追本溯源：Full-GC-的常见根因剖析" class="headerlink" title="二、追本溯源：Full GC 的常见根因剖析"></a>二、追本溯源：Full GC 的常见根因剖析</h2><p>理论结合实践，我们来看一个真实的生产案例：某商品中心服务，在缓存未命中的情况下，每次从数据库查询并组装一个 2MB 的大对象，在高并发场景下，导致老年代空间迅速被占满，频繁触发长达 5 秒的 Full GC，最终导致大量请求超时。 核心解决方案是对查询字段进行裁剪，将对象体积从 2MB 降至 80KB，问题迎刃而解。</p>
<p>这个案例揭示了冰山一角。以下是导致 Full GC 的几类常见根因及其架构级解法：</p>
<h3 id="根因-1：本地缓存超配"><a href="#根因-1：本地缓存超配" class="headerlink" title="根因 1：本地缓存超配"></a>根因 1：本地缓存超配</h3><ul>
<li><strong>现象</strong>：堆转储（Heap Dump）分析发现，<code>ConcurrentHashMap</code> 等本地缓存容器占据了绝大部分堆内存，且缓存对象没有过期或淘汰策略。</li>
<li><strong>分析</strong>：这是典型的容量规划失误。本地缓存随着数据增长无限膨胀，最终填满老年代，且由于这些对象持续可达，GC 无法回收。</li>
<li><strong>架构级解法</strong>：<ul>
<li><strong>引入淘汰机制</strong>：将原生 <code>Map</code> 替换为 Caffeine 或 Guava Cache，并设置合理的容量上限和过期策略。</li>
<li><strong>缓存外部化</strong>：对于大数据集或集群环境，将缓存迁移至 Redis 等分布式缓存中间件，从根本上解除对 JVM 堆的依赖。</li>
</ul>
</li>
</ul>
<h3 id="根因-2：消息消费膨胀"><a href="#根因-2：消息消费膨胀" class="headerlink" title="根因 2：消息消费膨胀"></a>根因 2：消息消费膨胀</h3><ul>
<li><strong>现象</strong>：消费 Kafka 等消息队列时，老年代内存使用率出现瞬时尖峰。监控显示消息体积巨大。</li>
<li><strong>分析</strong>：消费者在反序列化大体积消息时，会创建短命的大对象，这些对象可能直接进入老年代，或迅速占满新生代后提前晋升，瞬间触发 Full GC。</li>
<li><strong>架构级解法</strong>：<ul>
<li><strong>消息瘦身</strong>：遵循“传引用而非传值”的原则，消息体只传递关键 ID，由消费者按需查询完整数据。</li>
<li><strong>启用压缩</strong>：在生产者和消费者端启用 Snappy 或 LZ4 等高效压缩算法。</li>
<li><strong>分块传输</strong>：对于文件等必须传输的大内容，采用分块机制。</li>
</ul>
</li>
</ul>
<h3 id="根因-3：数据库查询放大"><a href="#根因-3：数据库查询放大" class="headerlink" title="根因 3：数据库查询放大"></a>根因 3：数据库查询放大</h3><ul>
<li><strong>现象</strong>：执行报表导出或全量查询后，老年代内存陡增。堆转储中发现巨大的 <code>ArrayList</code>，其中包含了全部的数据库查询结果。</li>
<li><strong>分析</strong>：DAO 层在没有分页的情况下，一次性从数据库加载了数万甚至数十万条记录，这个巨大的结果集在内存中直接撑爆了堆。</li>
<li><strong>架构级解法</strong>：<ul>
<li><strong>强制分页</strong>：规定所有列表查询接口必须分页。</li>
<li><strong>使用游标查询</strong>：对于批量导出等任务，使用 MyBatis 的 <code>Cursor</code> 等流式处理技术，避免一次性加载全量数据。</li>
<li><strong>字段裁剪</strong>：杜绝 <code>SELECT *</code>，只查询必要的字段，减少单条记录的内存占用。</li>
</ul>
</li>
</ul>
<h3 id="根因-4：滥用-ThreadLocal-导致内存泄漏"><a href="#根因-4：滥用-ThreadLocal-导致内存泄漏" class="headerlink" title="根因 4：滥用 ThreadLocal 导致内存泄漏"></a>根因 4：滥用 <code>ThreadLocal</code> 导致内存泄漏</h3><ul>
<li><strong>现象</strong>：老年代内存缓慢且稳定地增长，堆转储发现大量由线程池工作线程引用的对象无法被回收。</li>
<li><strong>分析</strong>：线程池中的线程是复用的。如果在 <code>ThreadLocal</code> 中存放了对象，但在请求处理结束后没有调用 <code>remove()</code> 方法清理，那么这个对象会被工作线程一直强引用，导致内存泄漏。</li>
<li><strong>架构级解法</strong>：</li>
</ul>
<p><strong>规范使用</strong>：强制要求在使用 <code>ThreadLocal</code> 的代码块外层包裹 <code>try-finally</code>，并在 <code>finally</code> 中执行 <code>remove()</code> 操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    userContextHolder.set(userInfo);</span><br><span class="line">    <span class="comment">// ... 业务逻辑</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    userContextHolder.remove(); <span class="comment">// 必须清理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>使用</strong><code>**TransmittableThreadLocal**</code>：在需要父子线程传递上下文的复杂异步场景中，使用阿里开源的 TTL 框架。</li>
</ul>
<h3 id="根因-5：反射或动态代理滥用"><a href="#根因-5：反射或动态代理滥用" class="headerlink" title="根因 5：反射或动态代理滥用"></a>根因 5：反射或动态代理滥用</h3><ul>
<li><strong>现象</strong>：Full GC 的触发原因是元空间（Metaspace）溢出。 监控显示 Metaspace 使用量持续增长直至触顶。</li>
<li><strong>分析</strong>：反射、CGLib、ASM 等动态代码生成技术会在运行时创建大量新类。如果这些类或其类加载器没有被正确缓存或卸载，就会占满元空间。</li>
<li><strong>架构级解法</strong>：<ul>
<li><strong>增加缓存机制</strong>：对于反射获取的 <code>Method</code>、<code>Field</code> 等对象进行缓存，避免在热点路径上反复调用。</li>
<li><strong>审视技术选型</strong>：评估是否过度使用了动态代理等技术，在非必要场景可考虑更静态的实现方式。</li>
</ul>
</li>
</ul>
<h2 id="三、精准定位：从外部观测到四步闭环的排查框架"><a href="#三、精准定位：从外部观测到四步闭环的排查框架" class="headerlink" title="三、精准定位：从外部观测到四步闭环的排查框架"></a>三、精准定位：从外部观测到四步闭环的排查框架</h2><p>顶尖高手排查 Full GC，绝不能靠“猜”。我们应遵循一套“内外兼修”的标准化流程：先通过外部监控宏观观测，再采用“四步定位法”深入根因。</p>
<h3 id="阶段一：外部观测-——-明确频率与影响"><a href="#阶段一：外部观测-——-明确频率与影响" class="headerlink" title="阶段一：外部观测 —— 明确频率与影响"></a>阶段一：外部观测 —— 明确频率与影响</h3><p>首先，我们必须通过监控工具获取客观数据，量化问题的影响范围和严重程度。</p>
<table>
<thead>
<tr>
<th>监控维度</th>
<th>关键指标</th>
<th>推荐工具</th>
<th>解读与目的</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Full GC 基础信息</strong></td>
<td>频率（次&#x2F;分钟）、STW 时间（毫秒&#x2F;次）、回收效果</td>
<td><code>jstat</code><br/>, Prometheus + Grafana, SkyWalking</td>
<td><strong>目的</strong>：确诊问题并量化其严重性。 Prometheus 用于建立历史趋势大盘和告警，是现代化运维的基石。</td>
</tr>
<tr>
<td><strong>内存分区动态变化</strong></td>
<td>老年代&#x2F;元空间使用量曲线、新生代晋升速率</td>
<td>Arthas, JProfiler, JVisualVM</td>
<td><strong>目的</strong>：判断是“内存泄漏”还是“大对象冲击”。 内存曲线只升不降是泄漏的典型特征。</td>
</tr>
<tr>
<td><strong>系统级影响</strong></td>
<td>接口 P99&#x2F;P95 延迟、CPU 使用率、请求超时率</td>
<td>SkyWalking&#x2F;Zipkin, <code>top -Hp</code></td>
<td><strong>目的</strong>：将 JVM 内部事件与外部业务影响关联，完成归因。</td>
</tr>
</tbody></table>
<p><strong>实操步骤 (以 Prometheus + Grafana 为例):</strong></p>
<ol>
<li>部署 <code>jmx_exporter</code> 等工具，采集 <code>jvm_gc_full_count</code> (Full GC 次数) 等关键指标。</li>
<li>在 Grafana 中配置仪表盘，并设置告警阈值，例如 “Full GC 频率 &gt; 1 次 &#x2F; 5 分钟” 或 “单次 STW &gt; 500ms”。</li>
<li>观察内存曲线：若老年代使用量呈“快速上升 -&gt; Full GC 后骤降 -&gt; 再次快速上升”的锯齿状，说明存在“短时大对象”问题；若持续上升不下降，则高度怀疑内存泄漏。</li>
</ol>
<h3 id="阶段二：根因排查-——-四步定位闭环"><a href="#阶段二：根因排查-——-四步定位闭环" class="headerlink" title="阶段二：根因排查 —— 四步定位闭环"></a>阶段二：根因排查 —— 四步定位闭环</h3><p>在宏观锁定问题后，我们采用<strong>“采集 → 日志解析 → 堆转储分析 → 根因验证”</strong>的四步闭环法，精准定位“罪魁祸首”。</p>
<h4 id="第-1-步：数据采集-前提"><a href="#第-1-步：数据采集-前提" class="headerlink" title="第 1 步：数据采集 (前提)"></a>第 1 步：数据采集 (前提)</h4><p>高质量的数据是分析成功的前提。</p>
<p><strong>GC 日志采集</strong>：务必在 JVM 启动参数中配置详细的 GC 日志，并确保持续开启。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># JDK9+ 推荐配置</span></span><br><span class="line">-Xlog:gc*:file=/var/log/jvm/gc-%t.log:<span class="keyword">time</span>,level,tags:filecount=10,filesize=100m</span><br><span class="line"><span class="comment"># JDK8 及以下</span></span><br><span class="line">-XX:+PrintGCDetails</span><br><span class="line">-XX:+PrintGCDateStamps</span><br><span class="line">-XX:+PrintHeapAtGC</span><br></pre></td></tr></table></figure>

<p><strong>堆转储 (Heap Dump) 采集</strong>：应在 <strong>Full GC 发生后立即采集</strong>，此时内存中主要为存活对象，便于分析。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 推荐使用 jmap</span></span><br><span class="line">jmap -dump:live,format=b,file=heap.hprof &lt;pid&gt;</span><br><span class="line"><span class="comment"># 也可在生产环境通过 Arthas 在线采集</span></span><br><span class="line">heapdump /tmp/heap.hprof</span><br></pre></td></tr></table></figure>

<h4 id="第-2-步：GC-日志解析-锁定范围"><a href="#第-2-步：GC-日志解析-锁定范围" class="headerlink" title="第 2 步：GC 日志解析 (锁定范围)"></a>第 2 步：GC 日志解析 (锁定范围)</h4><p>GC 日志是“线索探测器”，能帮我们快速缩小根因范围。  核心是关注以下几点：</p>
<ol>
<li><strong>判断触发类型</strong>：查看日志关键字，确定是 <code>Allocation Failure</code> (老年代空间不足)、<code>Metadata GC Threshold</code> (元空间溢出) 还是 <code>System.gc()</code> (显式调用)。</li>
<li><strong>分析回收有效性</strong>：比较 GC 前后老年代的使用率。如果回收后内存下降不明显（例如从 90% 降到 85%），则为“无效 GC”，强烈暗示内存泄漏。</li>
<li><strong>形成初步假设</strong>：结合日志信息，形成分析假设。例如：“无效 Full GC + 无大对象分配” -&gt; 怀疑静态缓存泄漏；“元空间溢出” -&gt; 怀疑动态类生成过多。</li>
</ol>
<h4 id="第-3-步：堆转储分析-精准定位"><a href="#第-3-步：堆转储分析-精准定位" class="headerlink" title="第 3 步：堆转储分析 (精准定位)"></a>第 3 步：堆转储分析 (精准定位)</h4><p>堆转储是“根因定位器”，用于验证假设并找到具体问题代码。  推荐使用 MAT (Memory Analyzer Tool)。</p>
<ol>
<li>**支配树 (Dominator Tree)**：快速找到“内存大户”。按“Retained Size”（对象被回收后可释放的内存）排序，重点关注占比异常的对象。</li>
<li>**引用链分析 (Path to GC Roots)**：找到内存大户后，分析其引用链，确定“谁”持有了它，导致其无法被回收。如果最终引用来自一个静态变量，那么内存泄漏的根因就基本确定了。</li>
<li><strong>类加载器分析</strong>：如果怀疑是元空间问题，可通过“Class Loader Explorer”查看各个类加载器加载的类的数量，排查类加载器泄漏。</li>
</ol>
<h4 id="第-4-步：根因验证-确保可靠"><a href="#第-4-步：根因验证-确保可靠" class="headerlink" title="第 4 步：根因验证 (确保可靠)"></a>第 4 步：根因验证 (确保可靠)</h4><p>分析得出的结论需要通过多维度验证，避免误判。</p>
<ul>
<li><strong>多份快照对比</strong>：间隔一段时间采集多份堆转储，对比可疑对象数量是否在持续增长。</li>
<li><strong>业务代码核对</strong>：回到代码中，核实相关逻辑是否与分析结论一致。</li>
<li><strong>修复后验证</strong>：通过临时修复或模拟修复，观察 Full GC 频率是否显著下降。</li>
</ul>
<h3 id="特例：在-K8s-容器环境中如何排查？"><a href="#特例：在-K8s-容器环境中如何排查？" class="headerlink" title="特例：在 K8s 容器环境中如何排查？"></a>特例：在 K8s 容器环境中如何排查？</h3><p>在 K8s 环境中，由于资源隔离和 Pod 的动态性，排查变得更复杂。</p>
<ol>
<li><strong>核心挑战</strong>：JVM 默认感知的是宿主机资源而非容器的 <code>limit</code>，可能导致堆设置不当或 GC 线程数过多。</li>
<li><strong>排查框架</strong>：<ul>
<li>**第一层 (全局监控)**：通过 Prometheus 监控 <code>container_memory_usage_bytes</code> 和 JVM GC 指标，设置告警，快速定位到异常 Pod。</li>
<li>**第二层 (深入 Pod)**：使用 <code>kubectl exec -it &lt;pod-name&gt; -- /bin/bash</code> 进入容器内部，使用 <code>jstat</code>、<code>jmap</code> 等传统工具进行诊断。</li>
<li>**第三层 (自动化诊断)**：采用 <strong>Sidecar 模式</strong>收集 GC 日志，或集成 SkyWalking、Arthas 等 APM 工具，实现无侵入式的在线诊断。</li>
</ul>
</li>
</ol>
<h2 id="四、系统治理：从应急处理到架构优化的-E2E-解决方案"><a href="#四、系统治理：从应急处理到架构优化的-E2E-解决方案" class="headerlink" title="四、系统治理：从应急处理到架构优化的 E2E 解决方案"></a>四、系统治理：从应急处理到架构优化的 E2E 解决方案</h2><p>解决 Full GC 问题需要分阶段进行，确保业务稳定性的同时根除问题。</p>
<h3 id="第-1-步：应急处理-1-小时内见效"><a href="#第-1-步：应急处理-1-小时内见效" class="headerlink" title="第 1 步：应急处理 (1 小时内见效)"></a>第 1 步：应急处理 (1 小时内见效)</h3><p>当生产环境告急时，首要任务是“止血”，快速恢复服务。</p>
<ul>
<li><strong>临时清理</strong>：若根因是静态缓存，可通过预留的接口动态清理缓存。</li>
<li><strong>限流降级</strong>：通过 Sentinel 等工具对非核心接口进行限流，降低对象创建速率。</li>
<li><strong>重启服务</strong>：作为最后的手段，适用于无法在线清理的内存泄漏场景，但需做好流量切换。</li>
</ul>
<h3 id="第-2-步：短期措施-1-3-天"><a href="#第-2-步：短期措施-1-3-天" class="headerlink" title="第 2 步：短期措施 (1-3 天)"></a>第 2 步：短期措施 (1-3 天)</h3><p>应急处理后，需针对根因进行代码和 JVM 优化。</p>
<ul>
<li><strong>局部代码优化</strong>：<ul>
<li><strong>修复缓存</strong>：为静态缓存增加过期和淘汰策略，或将其外部化到 Redis。</li>
<li><strong>对象复用</strong>：在循环中用 <code>StringBuilder</code> 替代 <code>String</code> 拼接，对大对象使用池化技术。</li>
<li><strong>资源关闭</strong>：强制使用 <code>try-with-resources</code> 确保 IO 流、数据库连接等资源被正确关闭。</li>
</ul>
</li>
<li><strong>JVM 配置优化</strong>：<ul>
<li>根据业务场景选择合适的垃圾收集器（如 G1）。</li>
<li>基于压测数据，合理调整新生代与老年代比例 (<code>-XX:NewRatio</code>)、目标停顿时间 (<code>-XX:MaxGCPauseMillis</code>) 等核心参数。</li>
</ul>
</li>
</ul>
<h3 id="第-3-步：长期措施-1-3-个月"><a href="#第-3-步：长期措施-1-3-个月" class="headerlink" title="第 3 步：长期措施 (1-3 个月)"></a>第 3 步：长期措施 (1-3 个月)</h3><p>要从根本上杜绝 Full GC 问题，必须进行架构升级，从“被动调优”转向“主动预防”。</p>
<ul>
<li><strong>缓存架构优化</strong>：<ul>
<li>设计多级缓存体系（本地 Caffeine + 分布式 Redis）。</li>
<li>对 Redis 中的大 Key 进行分片，避免一次性加载。</li>
</ul>
</li>
<li><strong>数据处理架构优化</strong>：<ul>
<li>批处理任务采用分片执行，化整为零。</li>
<li>对于实时数据，采用 Flink 等流处理框架进行增量计算。</li>
</ul>
</li>
<li><strong>监控与预案架构</strong>：<ul>
<li>建立全链路监控看板，关联 “Full GC -&gt; 接口延迟 -&gt; 业务失败率”。</li>
<li>制定完善的故障应急预案，确保问题发生时能快速响应。</li>
</ul>
</li>
</ul>
<h2 id="总结：架构师的-Full-GC-治理思维"><a href="#总结：架构师的-Full-GC-治理思维" class="headerlink" title="总结：架构师的 Full GC 治理思维"></a>总结：架构师的 Full GC 治理思维</h2><p>频繁的 Full GC 从来不只是一个孤立的 JVM 问题，它更像是“架构不合理”或“代码质量不佳”在运行时的外在表现。  作为一名追求卓越的技术人，我们需要建立以下高维度思维：</p>
<ol>
<li><strong>系统化思维</strong>：将 Full GC 问题放在“代码 → JVM → 架构 → 业务”的完整链路中进行分层排查。</li>
<li><strong>预防大于治疗</strong>：通过优秀的架构设计（如缓存分片、流式处理）从源头上避免内存过载，而非依赖事后的亡羊补牢。</li>
<li><strong>数据驱动决策</strong>：所有的分析和优化都必须基于监控数据、GC 日志和堆转储等客观证据，杜绝“凭经验调参”。</li>
</ol>
<p>最终，治理 Full GC 的目标不仅仅是解决当下的性能瓶颈，而是<strong>建立一套可扩展、高韧性的内存资源管理体系</strong>，确保系统在业务持续增长的压力下，依然能保持核心服务的稳定与高效。</p>
]]></content>
      <categories>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>GC</tag>
        <tag>性能优化</tag>
        <tag>架构治理</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2025/10/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
